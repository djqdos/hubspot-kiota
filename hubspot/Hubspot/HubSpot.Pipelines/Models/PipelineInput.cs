// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace True.Services.HubSpot.Pipelines.Models {
    /// <summary>
    /// An input used to create or replace a pipeline&apos;s definition.
    /// </summary>
    public class PipelineInput : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The order for displaying this pipeline. If two pipelines have a matching `displayOrder`, they will be sorted alphabetically by label.</summary>
        public int? DisplayOrder { get; set; }
        /// <summary>A unique label used to organize pipelines in HubSpot&apos;s UI</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>Pipeline stage inputs used to create the new or replacement pipeline.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PipelineStageInput>? Stages { get; set; }
#nullable restore
#else
        public List<PipelineStageInput> Stages { get; set; }
#endif
        /// <summary>
        /// Instantiates a new PipelineInput and sets the default values.
        /// </summary>
        public PipelineInput() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PipelineInput CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PipelineInput();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"displayOrder", n => { DisplayOrder = n.GetIntValue(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"stages", n => { Stages = n.GetCollectionOfObjectValues<PipelineStageInput>(PipelineStageInput.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("displayOrder", DisplayOrder);
            writer.WriteStringValue("label", Label);
            writer.WriteCollectionOfObjectValues<PipelineStageInput>("stages", Stages);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
